#+OPTIONS: toc:nil

Emacs is a programmable text editor.

[[http://youtu.be/jNa3axo40qM][This video demonstrates some of Emacs' powerful editing capabilities]]

[[screenshot.png]]

* Installation

Just clone this repository onto your $HOME directory and start Emacs, like this:

#+BEGIN_EXAMPLE bash
#!/bin/bash
cd $HOME
if [ -d .emacs.d ] ;then mv .emacs.d .emacs.d.SAVE ;fi
git clone http://github.com/frgomes/.emacs.d
emacs &
#+END_EXAMPLE

That's it!

If everything goes according to plan, Emacs will download a lot of stuff from the Internet, compile everything, configure itself and present a dark window with a sidebar showing the current directory tree.


* Features
** Support for programming languages

 These are programming languages supported at the moment and the stability of the current configuration:

 | Package          | Purpose                           | Status  |
 |------------------+-----------------------------------+---------|
 | rust-mode        | Rust language                     | done    |
 | toml-mode        | Rust language (toml files)        | done    |
 | racer-mode       | Rust language (syntax completion) | done    |
 | cargo-minor-mode | Rust build tool                   | done    |
 | scala-mode       | Scala language                    | done    |
 | sbt-mode         | Scala build tool                  | done    |
 | web-mode         | Javascript language               | done    |
 | typescript-mode  | Typescript language               | testing |
 | python-mode      | Python language                   | testing |
 | go-mode          | Go language                       | testing |
 | lua-mode         | Lua language                      | done    |

** Support for IDEs

 These are IDEs supported at the moment and the stability of the current configuration:

 | Package          | Purpose                            | Status  |
 |------------------+------------------------------------+---------|
 | ensime           | Scala IDE                          | done    |
 | tide             | Typescript IDE                     | testing |

** Support for markup languages

 These are markup languages supported at the moment and the stability of the current configuration:

 | Package       | Purpose              | Status |
 |---------------+----------------------+--------|
 | markdown-mode | Markdown support     | done   |
 | sphinx-mode   | Complements rst-mode | done   |
 | json-mode     | JSON mode            | done   |
 | yaml-mode     | YAML mode            | done   |

** Other extensions focusing on usability and productivity

 These are additional packages supported at the moment and the stability of the current configuration:

 | Package                 | Purpose                                        |         |
 |-------------------------+------------------------------------------------+---------|
 | org-plus-contrib        | Org Mode with contributions                    | testing |
 | projectile              | project interaction library                    | done    |
 | undo-tree               | recovers any past state of a buffer            | done    |
 | move-dup                | Eclipse-like move and duplicate lines          | done    |
 | highlight-symbol        | highlight and navigate between symbols         | done    |
 | goto-chg                | goto last change in current buffer             | done    |
 | company                 | "complete anything" in-buffer completion       | done    |
 | yasnippet               | template system                                | done    |
 | yatemplate              | expand abbreviations into function templates   | done    |
 | smartparens             | deals with parens pairs in smart ways          | done    |
 | helm                    | incremental completion and selection narrowing | done    |
 | neotree                 | tree navigation sidebar                        | done    |
 | magit                   | a powerful frontend for Git                    | done    |
 | monky                   | a powerful frontend for Mercurial/Hg           | done    |
 | gist                    | share snippets and pastes                      | done    |
 | find-file-in-repository | find files in the source control               | done    |
 | multiple-cursors        | edit multiple places of a buffer at once       | done    |
 | window-numbering        | assign numbers to windows for quick access     | done    |
 | expand-region           | increase selected region by semantic units     | done    |
 | monokai-theme           | a dark colour theme                            | done    |


----


* This configuration file

This file you are reading right now is also a Emacs configuration file.

You can skip reading the remainder of this file.

** Bootstrap

#+BEGIN_SRC emacs-lisp 
;; Turn off mouse interface early in startup to avoid momentary display
(if (fboundp 'menu-bar-mode)   (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode)   (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tooltip-mode)    (tooltip-mode -1))

;; No splash screen please ... jeez
(setq inhibit-startup-message t)
#+END_SRC

** Define utility functions
#+BEGIN_SRC emacs-lisp
(defun load-packages (package-list)
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package))))

(defun list-file-contents (path)
  "Lists files referenced from a configuration file."
  (if (file-exists-p (expand-file-name path))
    (with-temp-buffer
      (insert-file-contents (expand-file-name path))
      (split-string (buffer-string) "\n" t))
    nil))

(defun eval-file (path)
  "Evaluates a file file."
  (if (file-exists-p (expand-file-name path))
    (load-file (expand-file-name path))
    nil))
#+END_SRC

** Load packages

#+BEGIN_SRC emacs-lisp 
;; Package repositories
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC

 We are using packages from =org-plus-contrib= such as [[http://orgmode.org/worg/org-contrib/org-index.html][org-index]], which requires http://orgmode.org/elpa/ to be added to ``package-archives``.

#+BEGIN_SRC emacs-lisp 
(add-to-list 'package-archives 
             '("org"   . "http://orgmode.org/elpa/") t)
#+END_SRC

 We account for backwards compatibility here... possibly... not really tested.

#+BEGIN_SRC emacs-lisp 
(when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

 Install =use-package= and its dependencies. Nothing else at this point.

#+BEGIN_SRC emacs-lisp 
;; Fetch list of available packages
(package-initialize) 
(unless package-archive-contents (package-refresh-contents))

;; Load packages needed for bootstrapping
(load-packages '(use-package diminish bind-key))
#+END_SRC

 Make sure that from now on =use-package= manages installation of packages, including downloading them.

#+BEGIN_SRC emacs-lisp 
;; From now on, use-package is responsible for downloading packages
(setq use-package-always-ensure t)
#+END_SRC

** Employ /use-package/ for package configuration

#+BEGIN_SRC emacs-lisp 
;; Wire use-package https://github.com/jwiegley/use-package
(eval-when-compile (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)                ;; if you use any :bind variant
#+END_SRC

** Employ /org-plus-contrib/ instead of /org/

Make sure we are employing =org-plus-contrib= instead of =org=.

#+BEGIN_SRC emacs-lisp
; (use-package org
;     :ensure   org-plus-contrib
;     :commands org-agenda org-capture org-index)
#+END_SRC

In case of trouble caused by =use-package=, you can try to load =oreg-plus-contrib= like this:

#+BEGIN_SRC emacs-lisp
(load-packages '(org-plus-contrib))
#+END_SRC

** /projectile/: project interaction library

#+BEGIN_SRC emacs-lisp 
(use-package projectile
  :demand
  :init   (setq projectile-use-git-grep t)
  :config (projectile-global-mode t)
  :bind   (("s-f" . projectile-find-file)
           ("s-F" . projectile-grep)))
#+END_SRC

** /undo-tree/: recovers any past state of a buffer

#+BEGIN_SRC emacs-lisp 
(use-package undo-tree
  :diminish undo-tree-mode
  :config (global-undo-tree-mode)
  :bind ("s-/" . undo-tree-visualize))
#+END_SRC

** /move-dup/: Eclipse-like move and duplicate lines

#+BEGIN_SRC emacs-lisp
(use-package move-dup
  :config (global-move-dup-mode)
  :bind (("S-M-<up>"     . md/move-lines-up)
         ("S-M-<down>"   . md/move-lines-down)
         ("C-M-<up>"   . md/duplicate-up)
         ("C-M-<down>" . md/duplicate-down)))
#+END_SRC

** /highlight-symbol/: highlight and navigate between symbols

#+BEGIN_SRC emacs-lisp 
(use-package highlight-symbol
  :diminish highlight-symbol-mode
  :commands highlight-symbol
  :bind ("s-h" . highlight-symbol))
#+END_SRC

** /goto-chg/: goto last change in current buffer

#+BEGIN_SRC emacs-lisp 
(use-package goto-chg
  :commands goto-last-change
  ;; complementary to
  ;; C-x r m / C-x r l
  ;; and C-<space> C-<space> / C-u C-<space>
  :bind (("C-." . goto-last-change)
         ("C-," . goto-last-change-reverse)))
#+END_SRC
   
** /company/: "complete anything" in-buffer completion

#+BEGIN_SRC emacs-lisp 
(use-package company
  :diminish company-mode
  :commands company-mode
  :init
    (setq
     company-dabbrev-ignore-case nil
     company-dabbrev-code-ignore-case nil
     company-dabbrev-downcase nil
     company-idle-delay 0
     company-minimum-prefix-length 4)
  :config
    ;; disables TAB in company-mode, freeing it for yasnippet
    (define-key company-active-map [tab] nil)
    (define-key company-active-map (kbd "TAB") nil))
#+END_SRC

** /yasnippet/: template system

#+BEGIN_SRC emacs-lisp 
(use-package yasnippet
  :diminish yas-minor-mode
  :commands yas-minor-mode
  :config (yas-reload-all))
#+END_SRC

** /yatemplate/: expands abbreviations into function templates

#+BEGIN_SRC emacs-lisp 
(use-package yatemplate
  :defer 2 ;; WORKAROUND https://github.com/mineo/yatemplate/issues/3
  :config
    (auto-insert-mode)
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist))
#+END_SRC

** /smartparens/: deals with parens pairs in smart ways

#+BEGIN_SRC emacs-lisp 
(use-package smartparens
  :diminish smartparens-mode
  :commands
    smartparens-strict-mode
    smartparens-mode
    sp-restrict-to-pairs-interactive
    sp-local-pair
  :init (setq sp-interactive-dwim t)
  :config
    (require 'smartparens-config)
    (sp-use-smartparens-bindings)
    (sp-pair "(" ")" :wrap "C-(") ;; how do people live without this?
    (sp-pair "[" "]" :wrap "s-[") ;; C-[ sends ESC
    (sp-pair "{" "}" :wrap "C-{")
    ;; WORKAROUND https://github.com/Fuco1/smartparens/issues/543
    (bind-key "C-<left>"  nil smartparens-mode-map)
    (bind-key "C-<right>" nil smartparens-mode-map)
    (bind-key "s-<delete>"    'sp-kill-sexp smartparens-mode-map)
    (bind-key "s-<backspace>" 'sp-backward-kill-sexp smartparens-mode-map))
#+END_SRC

** /helm/: incremental completion and selection narrowing

#+BEGIN_SRC emacs-lisp 
(use-package helm
  :diminish helm-mode
  :commands (helm-mode helm-M-x helm-find-files)
  :bind (("M-x"     . helm-M-x)
         ("C-x C-f" . helm-find-files)))
#+END_SRC

** /neotree/: tree natigation sidebar

#+BEGIN_SRC emacs-lisp 
(use-package neotree
  :defer 2
  :diminish neotree
  :commands neotree
  :config (neotree)
  :bind ("<f8>" . neotree-toggle))
#+END_SRC

** /magit/: a powerful frontend for Git

#+BEGIN_SRC emacs-lisp 
(use-package magit
  :diminish magit-status
  :commands magit-status
  :config (setq magit-last-seen-setup-instructions "1.4.0")
  :bind ("M-s M-g" . magit-status))
#+END_SRC

** /monky/: a powerful frontend for Mercurial/Hg

#+BEGIN_SRC emacs-lisp 
(use-package monky
  :diminish monky-status
  :commands monky-status
  :init (setq monky-process-type 'cmdserver)
  :bind ("M-s M-m" . monky-status))
#+END_SRC

** /gist/ shares snippets and pastes

#+BEGIN_SRC emacs-lisp 
(use-package gist
  :diminish gist-list
  :commands (gist-list gist-region-or-buffer)
  :bind (("M-s M-o" . gist-list)
	 ("M-s M-s" . gist-region-or-buffer)))
#+END_SRC
  
** /find-file-in-repository/ find files in the source control

#+BEGIN_SRC emacs-lisp 
(use-package find-file-in-repository
  :diminish find-file-in-repository
  :commands find-file-in-repository
  :bind ("M-s M-f" . find-file-in-repository))
#+END_SRC

** /multiple-cursors/: edit multiple places of a buffer at once

#+BEGIN_SRC emacs-lisp 
(use-package multiple-cursors)
#+END_SRC

** /window-numbering/: assign numbers to windows for quick access

#+BEGIN_SRC emacs-lisp 
(use-package window-numbering
  :init (window-numbering-mode 1))
#+END_SRC

** /expand-region/: increase selected region by semantic units

#+BEGIN_SRC emacs-lisp 
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC
  
** /monokai-theme/: a dark colour theme

#+BEGIN_SRC emacs-lisp 
(use-package monokai-theme
  :config (load-theme 'monokai t)
  :init (setq frame-background-mode 'dark))
#+END_SRC

** Configure programming language modes
*** Install flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

*** Configure Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t)
 
(use-package cargo
  :ensure t
  :hook (rust-mode . racer-mode))
 
(use-package toml-mode
  :ensure t
  :hook (rust-mode . cargo-minor-mode))
 
(use-package company-racer
   :ensure t
   :hook (rust-mode  . racer-mode)
   :hook (racer-mode . eldoc-mode)
   :hook (racer-mode . company-mode)
   :init
     (with-eval-after-load 'company
       (add-to-list 'company-backends 'company-racer)))
 #+END_SRC

*** Configure Lua

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :ensure t)
#+END_SRC

*** Configure Scala

#+BEGIN_SRC emacs-lisp
(use-package sbt-mode
  :pin melpa)

(use-package scala-mode
  :pin melpa)
#+END_SRC

*** Configure Javascript, HTML, CSS and related

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :commands web-mode)
#+END_SRC

*** Configure TypeScript

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :commands typescript-mode)
#+END_SRC

*** Configure Python

#+BEGIN_SRC emacs-lisp
;; Emacs 24.3+ already ships with python.el
;;(use-package python-mode)

(use-package virtualenvwrapper
  :ensure t
  :hook (python-mode . ((venv-initialize-interactive-shells)(venv-initialize-eshell))))
#+END_SRC

*** Configure Golang

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :init (setq-default
           tab-width 2
           standard-indent 2
           indent-tabs-mode nil)
  :config
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode)))

(use-package go-autocomplete
  :ensure t)

(use-package company-go
  :ensure t)
#+END_SRC

** Configure IDEs
*** Configure Ensime, a Scala IDE

#+BEGIN_SRC emacs-lisp
(use-package ensime
  :ensure t
  :pin melpa)
#+END_SRC

*** Configure Tide, a Typescript IDE

#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
;(setq company-tooltip-align-annotations t)

 (use-package tide
   :ensure t
   :hook (typescript-mode . setup_tide_mode))
#+END_SRC

** Configure markup languages
*** Configure Markdown, JSON and YAML

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands markdown-mode
  :config
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package sphinx-mode
  :commands json-mode
  :hook (rst-mode . sphinx-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :commands json-mode
  :config
    (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :commands yaml-mode
  :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'"  . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
              (lambda ()
                (define-key yaml-mode-map (kbd "<return>") #'newline-and-indent))))
#+END_SRC

** Global keybindings and configurations
*** Configure CUA mode

 CUA selection mode is handy for highlighting rectangular regions properly.

#+BEGIN_SRC emacs-lisp
(cua-selection-mode t)
 #+END_SRC

*** Configuring keybindings
 *Note:* see also /move-dup/ for more keybinds.
#+BEGIN_SRC emacs-lisp
;; keybinding for multiple-cursors
(require 'sgml-mode)
(global-set-key (kbd "C-` <right>")  'mc/mark-next-like-this)
(global-set-key (kbd "C-` <left>")   'mc/mark-previous-like-this)
(global-set-key (kbd "C-` <return>") 'mc/mark-all-like-this)
(global-set-key (kbd "C-` /")        'mc/mark-sgml-tag-pair)
(global-set-key (kbd "C-` <SPC>")    'mc/vertical-align-with-spaces)
;; editing very long lines... 
(global-set-key (kbd "C-|")  'toggle-truncate-lines)
#+END_SRC

*** 
*** 
*** 
*** General defaults
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(global-auto-complete-mode t)
#+END_SRC
** TODO [0/2] Configure additional Org Mode modules
*** Support for multiple agendas
#+BEGIN_SRC emacs-lisp
(require 'org-agenda)
(global-set-key (kbd "C-c a") 'org-agenda)
(setq org-agenda-files (list-file-contents "~/Documents/org-mode/agenda"))
#+END_SRC

*** Support for /org-index/

#+BEGIN_SRC emacs-lisp
(require 'org-index)
(global-set-key (kbd "C-c i") 'org-index)
#+END_SRC
*** TODO [0/1] Support for /org-capture/

- [ ] See: https://www.gnu.org/software/emacs/manual/html_node/org/Capture.html

#+BEGIN_SRC emacs-lisp
;(require 'org-capture)
;(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** Support for multiple Trello boards

 [[https://org-trello.github.io/trello-setup.html][See org-trello setup instructions here]]

 In addition, *make sure you protect your private data*, moving Trello credentials from *~/.emacs.d/.trello* and putting it *somewhere else*. You will have to create a symbolic link as below in order to cheat Emacs and make it find the configuration files where it would normally expect.

#+BEGIN_EXAMPLE bash
 $ ln -s ~/Documents/org-mode/.emacs.d/.trello ~/.emacs.d
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp
(load-packages '(org-trello))
(require 'org-trello)
;(setq orgtrello-log-level orgtrello-log-trace)
(setq org-trello-files
  (directory-files "~/Documents/org-mode/trello" ".*\.org$"))
#+END_SRC

*** TODO [0/1] Integration with Google Calendar

 - [ ] See: https://www.youtube.com/watch?v=vO_RF2dK7M0

#+BEGIN_SRC emacs-lisp
;; runs configuration for org files, if any.
;; see: http://cestlaz.github.io/posts/using-emacs-26-gcal
;; credits: Mike Zamansky
;(mapcar 'org-babel-load-file
;  (directory-files "~/Documents/orgfiles/config" t ".+\.org$"))
#+END_SRC

** Prologue

#+BEGIN_SRC emacs-lisp
(message "Initialization complete.")
#+END_SRC
