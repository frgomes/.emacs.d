#+OPTIONS: toc:nil

Emacs is a programmable text editor.

[[http://youtu.be/jNa3axo40qM][This video demonstrates some of Emacs' powerful editing capabilities]]

[[screenshot.png]]

* Installation

Just clone this repository onto your $HOME directory and start Emacs, like this:

#+BEGIN_EXAMPLE bash
#!/bin/bash
cd $HOME
if [ -d .emacs.d ] ;then mv .emacs.d .emacs.d.SAVE ;fi
git clone http://github.com/frgomes/.emacs.d
emacs &
#+END_EXAMPLE

That's it!

If everything goes according to plan, Emacs will download a lot of stuff from the Internet, compile everything, configure itself and present a dark window with a sidebar showing the current directory tree.


* Features
** Support for programming languages and data languages

Emacs has builtin support for Language Server Protocol. However, the range of languages which work out of the box.

| We provide shell scripts in a [[http://github.com/frgomes/bash-scripts][separate project]] which helps installing language servers.

More information about Language Server Protocol:

 * https://github.com/emacs-lsp/lsp-mode#supported-languages
 * http://langserver.org

 The current support matrix is shown below:

 | Language              | status    | LSP client  | LSP server         |
 |-----------------------+-----------+-------------+--------------------|
 | Ada                   | builtin   |             |                    |
 | Angular               | builtin   |             |                    |
 | Bash                  | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | C++                   | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-clang.sh][install-clang.sh]]   |
 | C#                    | builtin   |             |                    |
 | Closure               | builtin   |             |                    |
 | Cmake                 | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-python.sh][install-python.sh]]  |
 | Crystal               | builtin   |             |                    |
 | CSS/LessCSS/SASS/SCSS | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Dart                  | builtin   |             |                    |
 | Dhall                 | supported | dhall-mode  | [[http://github.com/frgomes/bash-scripts/user-install/install-dhall.sh][install-dhall.sh]]   |
 | Dockerfile            | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Elixir                | builtin   |             |                    |
 | Elm                   | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Erlang                | builtin   |             |                    |
 | Eslint                | builtin   |             |                    |
 | F#                    | builtin   |             |                    |
 | Fortran               | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-python.sh][install-python.sh]]  |
 | Go                    | missing   |             |                    |
 | Groovy                | builtin   |             |                    |
 | Hack                  | builtin   |             |                    |
 | HTML                  | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Haskell               | supported | lsp-haskell | [[http://github.com/frgomes/bash-scripts/sysadmin-install/install-haskell.sh][install-haskell.sh]] |
 | Lua                   | missing   |             |                    |
 | Markdown              | builtin   | pandoc      |                    |
 | Java                  | missing   |             |                    |
 | Javascript            | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Javascript Flow       | builtin   |             |                    |
 | JSON                  | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Julia                 | missing   |             |                    |
 | Kotlin                | builtin   |             |                    |
 | Nim                   | builtin   |             |                    |
 | OCaml                 | builtin   |             |                    |
 | PHP                   | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Powershell            | builtin   |             | automatic          |
 | Python                | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-python.sh][install-python.sh]]  |
 | R                     | builtin   |             |                    |
 | Ruby                  | builting  |             |                    |
 | Rust                  | supported | rust-mode   | [[http://github.com/frgomes/bash-scripts/user-install/install-rust.sh][install-rust.sh]]    |
 | Scala                 | supported | scala-mode  | [[http://github.com/frgomes/bash-scripts/user-install/install-scala.sh][install-scala.sh]]   |
 | Scala SBT             | supported | sbt-mode    | [[http://github.com/frgomes/bash-scripts/user-install/install-scala.sh][install-scala.sh]]   |
 | RST/Sphinx            | supported | PENDING     |                    |
 | Swift                 | missing   |             |                    |
 | TeX/LaTeX             | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-rust.sh][install-rust.sh]]    |
 | Typescript            | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Verilog               | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-python.sh][install-python.sh]]  |
 | VHDL                  | builtin   |             |                    |
 | VIMscript             | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | Vue                   | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |
 | XML                   | builtin   |             |                    |
 | YAML                  | builtin   |             | [[http://github.com/frgomes/bash-scripts/user-install/install-node.sh][install-node.sh]]    |

** Other extensions focusing on usability and productivity

 | Package                 | Purpose                                        | Status  |
 |-------------------------+------------------------------------------------+---------|
 | org-plus-contrib        | Org Mode with contributions                    | testing |
 | projectile              | project interaction library                    | done    |
 | ivy                     | Easy completion from a list                    | done    |
 | swiper                  | Isearch with an overview. Oh, man!             | done    |
 | counsel-jq              | Live preview of "jq" queries using counsel     | done    |
 | counsel-etags           | Complete Ctags/Etags solution using ivy        | done    |
 | counsel-projectile      | Ivy integration for Projectile                 | done    |
 | undo-tree               | recovers any past state of a buffer            | done    |
 | move-dup                | Eclipse-like move and duplicate lines          | done    |
 | highlight-symbol        | highlight and navigate between symbols         | done    |
 | goto-chg                | goto last change in current buffer             | done    |
 | yasnippet               | template system                                | done    |
 | yatemplate              | expand abbreviations into function templates   | done    |
 | smartparens             | deals with parens pairs in smart ways          | done    |
 | treemacs                | tree navigation sidebar                        | done    |
 | magit                   | a powerful frontend for Git                    | done    |
 | monky                   | a powerful frontend for Mercurial/Hg           | done    |
 | gist                    | share snippets and pastes                      | done    |
 | find-file-in-repository | find files in the source control               | done    |
 | multiple-cursors        | edit multiple places of a buffer at once       | done    |
 | window-numbering        | assign numbers to windows for quick access     | done    |
 | expand-region           | increase selected region by semantic units     | done    |
 | monokai-theme           | a dark colour theme                            | done    |


----


* About this configuration file

This file you are reading right now is also a Emacs configuration file.

You can skip reading the remainder of this file, unless you'd like to learn how to configure Emacs or you'd like to learn a bit of ``org-mode``.

** Bootstrap
#+BEGIN_SRC emacs-lisp 
;; Turn off mouse interface early in startup to avoid momentary display
(if (fboundp 'menu-bar-mode)   (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode)   (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tooltip-mode)    (tooltip-mode -1))
;; No splash screen please ... jeez
(setq inhibit-startup-message t)
#+END_SRC
** Bootstrap straight.el
#+BEGIN_SRC emacs-lisp 
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/master/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
;;;;  Effectively replace use-package with straight-use-package
;;; https://github.com/raxod502/straight.el/blob/develop/README.md#integration-with-use-package
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC
** Install /ivy/, /swiper/ and /counsel/ for easy completion from a list
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind
    (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map ("M-y" . ivy-next-line)))

(use-package ivy
  :requires (counsel)
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))

(use-package swiper
  :requires (ivy)
  :bind
    (("C-s"     . swiper-isearch)
	   ("C-r"     . swiper-isearch)
	   ("C-c C-r" . ivy-resume)
	   ("M-x"     . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
  :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

(use-package counsel-jq)
;;XXX (use-package counsel-etags)

(use-package projectile
  :demand
  :init   (setq projectile-use-git-grep t)
  :config (projectile-global-mode t)
  :bind   (("s-f" . projectile-find-file)
           ("s-F" . projectile-grep)))
(use-package counsel-projectile)
#+END_SRC

** Interface tweaks
*** /monokai-theme/: a dark colour theme

#+BEGIN_SRC emacs-lisp 
(use-package monokai-theme
  :config (load-theme 'monokai t)
  :init (setq frame-background-mode 'dark))
#+END_SRC

*** /treemacs/: tree navigation sidebar
#+BEGIN_SRC emacs-lisp 
(use-package treemacs
  :requires (ivy)
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
    (:map global-map
      ("M-0"       . treemacs-select-window)
      ("C-x t 1"   . treemacs-delete-other-windows)
      ("C-x t t"   . treemacs)
      ("C-x t B"   . treemacs-bookmark)
      ("C-x t C-t" . treemacs-find-file)
      ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :after treemacs dired
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit)
#+END_SRC
*** /undo-tree/: recovers any past state of a buffer

#+BEGIN_SRC emacs-lisp 
(use-package undo-tree
  :diminish undo-tree-mode
  :config (global-undo-tree-mode)
  :bind ("s-/" . undo-tree-visualize))
#+END_SRC

*** /move-dup/: Eclipse-like move and duplicate lines

#+BEGIN_SRC emacs-lisp
(use-package move-dup
  :config (global-move-dup-mode)
  :bind (("S-M-<up>"     . md-move-lines-up)
         ("S-M-<down>"   . md-move-lines-down)
         ("C-M-<up>"     . md-duplicate-up)
         ("C-M-<down>"   . md-duplicate-down)))
#+END_SRC

*** /highlight-symbol/: highlight and navigate between symbols

#+BEGIN_SRC emacs-lisp 
(use-package highlight-symbol
  :diminish highlight-symbol-mode
  :commands highlight-symbol
  :bind ("s-h" . highlight-symbol))
#+END_SRC

*** /goto-chg/: goto last change in current buffer

#+BEGIN_SRC emacs-lisp 
(use-package goto-chg
  :commands goto-last-change
  ;; complementary to
  ;; C-x r m / C-x r l
  ;; and C-<space> C-<space> / C-u C-<space>
  :bind (("C-." . goto-last-change)
         ("C-," . goto-last-change-reverse)))
#+END_SRC
   
*** /smartparens/: deals with parens pairs in smart ways

#+BEGIN_SRC emacs-lisp 
(use-package smartparens
  :diminish smartparens-mode
  :commands
    smartparens-strict-mode
    smartparens-mode
    sp-restrict-to-pairs-interactive
    sp-local-pair
  :init (setq sp-interactive-dwim t)
  :config
    (require 'smartparens-config)
    (sp-use-smartparens-bindings)
    (sp-pair "(" ")" :wrap "C-(") ;; how do people live without this?
    (sp-pair "[" "]" :wrap "s-[") ;; C-[ sends ESC
    (sp-pair "{" "}" :wrap "C-{")
    ;; WORKAROUND https://github.com/Fuco1/smartparens/issues/543
    (bind-key "C-<left>"  nil smartparens-mode-map)
    (bind-key "C-<right>" nil smartparens-mode-map)
    (bind-key "s-<delete>"    'sp-kill-sexp smartparens-mode-map)
    (bind-key "s-<backspace>" 'sp-backward-kill-sexp smartparens-mode-map))
#+END_SRC

*** /multiple-cursors/: edit multiple places of a buffer at once

#+BEGIN_SRC emacs-lisp 
(use-package multiple-cursors)
#+END_SRC

*** /window-numbering/: assign numbers to windows for quick access

#+BEGIN_SRC emacs-lisp 
(use-package window-numbering
  :init (window-numbering-mode 1))
#+END_SRC

*** /expand-region/: increase selected region by semantic units

#+BEGIN_SRC emacs-lisp 
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC
  
*** /gist/ shares snippets and pastes

#+BEGIN_SRC emacs-lisp 
(use-package gist
  :diminish gist-list
  :commands (gist-list gist-region-or-buffer)
  :bind (("M-s M-o" . gist-list)
	 ("M-s M-s" . gist-region-or-buffer)))
#+END_SRC
  
** Source code management
*** /magit/: a powerful frontend for Git
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :init
    (progn
      (bind-key "C-x g" 'magit-status)))

(setq magit-status-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

(use-package git-timemachine
  :requires (magit))

(use-package git-gutter
  :requires (magit)
  :init
    (global-git-gutter-mode +1))

(use-package smerge-mode
  :after hydra
  :config
  (defhydra unpackaged/smerge-hydra
    (:color pink :hint nil :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (unpackaged/smerge-hydra/body)))))

(use-package forge)
#+END_SRC
*** /monky/: a powerful frontend for Mercurial/Hg
#+BEGIN_SRC emacs-lisp 
(use-package monky
  :diminish monky-status
  :commands monky-status
  :init (setq monky-process-type 'cmdserver)
  :bind ("M-s M-m" . monky-status))
#+END_SRC
*** /find-file-in-repository/ find files in the source control
#+BEGIN_SRC emacs-lisp 
(use-package find-file-in-repository
  :diminish find-file-in-repository
  :commands find-file-in-repository
  :bind ("M-s M-f" . find-file-in-repository))
#+END_SRC
** Configure programming languages and markup languages
*** Install Language Server Protocol

LSP provides builtin support for a vast range of programming languages.
See: https://github.com/emacs-lsp/lsp-mode#supported-languages

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :commands yas-minor-mode
  :config (yas-reload-all))

(use-package yatemplate
;  :defer 2 ;; WORKAROUND https://github.com/mineo/yatemplate/issues/3
  :config
    (auto-insert-mode)
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist))

(use-package ivy-yasnippet)

;; see: https://emacs-lsp.github.io/lsp-mode/lsp-mode.html
(use-package lsp-mode
  :commands lsp
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake 1)
  :hook
    (scala-mode . lsp)
    (lsp-mode . lsp-lens-mode)
    (prog-mode   . lsp))

(use-package company
  :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))

(use-package company-lsp
  :requires (lsp-mode)
  :config
    (setq company-lsp-enable-snippet t)
    (push 'company-lsp company-backends))

(use-package projectile)

(use-package lsp-treemacs
  :requires (lsp-mode treemacs)
  :config
    (lsp-treemacs-sync-mode 1))

(use-package lsp-ui
  :after lsp-mode
  :diminish
  :commands lsp-ui-mode
  :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c u" . lsp-ui-imenu))
  :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-delay 4)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'at-point)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-doc-use-childframe t)
    (lsp-ui-doc-use-webkit nil)
    (lsp-ui-doc-use-webkit nil)
    (lsp-ui-doc-max-height 25)
    (lsp-ui-doc-max-width 180)
    (lsp-ui-peek-enable t)
    (lsp-ui-sideline-enable t)
    (lsp-ui-sideline-delay 4)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions t))
    ;;XXX :config
    ;;XXX   ;; Use lsp-ui-doc-webkit only in GUI
    ;;XXX   (setq lsp-ui-doc-use-webkit t)
    ;;XXX   ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
    ;;XXX   ;; https://github.com/emacs-lsp/lsp-ui/issues/243
    ;;XXX   (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    ;;XXX     (setq mode-line-format nil)))

(use-package hydra
  :requires (ivy))

(use-package lsp-ivy 
  :requires (ivy))

(use-package lsp-ui
  :requires (lsp-mode))

(use-package dap-mode
  :requires (lsp-mode)
  :config
  (dap-mode t)
  (dap-ui-mode t))
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :requires (lsp))
#+END_SRC
*** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)

(use-package lsp-haskell
  :requires (lsp haskell-mode))
#+END_SRC
*** Scala
#+BEGIN_SRC emacs-lisp
;; Enable scala-mode and sbt-mode
(use-package scala-mode
  :requires (lsp)
  :mode "\\.s\\(cala\\|bt\\)$")

(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map)
   ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
   (setq sbt:program-options '("-Dsbt.supershell=false")))

;; Add metals backend for lsp-mode
(use-package lsp-metals
  :config (setq lsp-metals-treeview-show-when-views-received t))

;; Use the Debug Adapter Protocol for running tests and debugging
(use-package posframe
  ;; Posframe is a pop-up tool that must be manually installed for dap-mode
  )

(use-package dap-mode
  :hook
  (lsp-mode . dap-mode)
  (lsp-mode . dap-ui-mode)
  )
#+END_SRC
*** Dhall
#+BEGIN_SRC emacs-lisp
;; Enable scala-mode and sbt-mode
(use-package dhall-mode
  :requires (lsp)
  :mode "\\.dhall$"
  :config
  (setq
    ;; uncomment the next line to disable automatic format
    ;; dhall-format-at-save nil

    ;; comment the next line to use unicode syntax
    dhall-format-arguments (\` ("--ascii"))

    ;; header-line is obsoleted by lsp-mode
    dhall-use-header-line nil))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(markdown-command "pandoc"))
#+END_SRC
** Configure global settings and keybindings
#+BEGIN_SRC emacs-lisp
; general defaults
(setq-default indent-tabs-mode nil)
;;(global-auto-complete-mode t)

;; CUA selection mode is handy for highlighting rectangular regions properly.
(cua-selection-mode t)

;; keybinding for multiple-cursors
(require 'sgml-mode)
(global-set-key (kbd "C-` <right>")  'mc/mark-next-like-this)
(global-set-key (kbd "C-` <left>")   'mc/mark-previous-like-this)
(global-set-key (kbd "C-` <return>") 'mc/mark-all-like-this)
(global-set-key (kbd "C-` /")        'mc/mark-sgml-tag-pair)
(global-set-key (kbd "C-` <SPC>")    'mc/vertical-align-with-spaces)

;; editing very long lines... 
(global-set-key (kbd "C-|")  'toggle-truncate-lines)

;; reassign negative-argument
(global-set-key (kbd "C-_") 'negative-argument)

;; make sure we can increase and decrease font size
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-+") 'text-scale-increase)

;; ivy, swiper and counsel integration with standard commands
(ivy-mode 1)
(counsel-projectile-mode 1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-c v") 'ivy-push-view)
(global-set-key (kbd "C-c V") 'ivy-pop-view)
;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;(global-set-key (kbd "<f1> l") 'counsel-find-library)
;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;(global-set-key (kbd "<f2> j") 'counsel-set-variable)
#+END_SRC

** TODO [0/4] Configure additional Org Mode modules
*** TODO [0/1] org-mode
 We are using packages from =org-plus-contrib= such as [[http://orgmode.org/worg/org-contrib/org-index.html][org-index]], which requires http://orgmode.org/elpa/ to be added to ``package-archives``.

#+BEGIN_SRC emacs-lisp 
;; (add-to-list 'package-archives 
;;              '("org"   . "http://orgmode.org/elpa/") t)
#+END_SRC
*** TODO [0/1] Employ /org-plus-contrib/ instead of /org/
Make sure we are employing =org-plus-contrib= instead of =org=.

#+BEGIN_SRC emacs-lisp
;; (use-package org
;;     :requires (org-plus-contrib)
;;     :commands org-agenda org-capture org-index)
#+END_SRC

In case of trouble caused by =use-package=, you can try to load =oreg-plus-contrib= like this:

#+BEGIN_SRC emacs-lisp
;; (load-packages '(org-plus-contrib))
#+END_SRC
*** Support for multiple agendas
#+BEGIN_SRC emacs-lisp
;;;(require 'org-agenda)
;;;(global-set-key (kbd "C-c a") 'org-agenda)
;;;(setq org-agenda-files (list-file-contents "~/Documents/org-mode/agenda"))
#+END_SRC
*** Support for /org-index/
#+BEGIN_SRC emacs-lisp
;; (require 'org-index)
;; (global-set-key (kbd "C-c i") 'org-index)
#+END_SRC
*** TODO [0/1] Support for /org-capture/

- [ ] See: https://www.gnu.org/software/emacs/manual/html_node/org/Capture.html

#+BEGIN_SRC emacs-lisp
;;;(require 'org-capture)
;;;(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** Support for multiple Trello boards

 [[https://org-trello.github.io/trello-setup.html][See org-trello setup instructions here]]

 In addition, *make sure you protect your private data*, moving Trello credentials from *~/.emacs.d/.trello* and putting it *somewhere else*. You will have to create a symbolic link as below in order to cheat Emacs and make it find the configuration files where it would normally expect.

#+BEGIN_EXAMPLE bash
 $ ln -s ~/Documents/org-mode/.emacs.d/.trello ~/.emacs.d
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
;; (load-packages '(org-trello))
;; (require 'org-trello)
;; ;(setq orgtrello-log-level orgtrello-log-trace)
;; (setq org-trello-files
;;   (directory-files "~/Documents/org-mode/trello" ".*\.org$"))
#+END_SRC
*** TODO [0/1] Integration with Google Calendar

 - [ ] See: https://www.youtube.com/watch?v=vO_RF2dK7M0

#+BEGIN_SRC emacs-lisp
;; ; runs configuration for org files, if any.
;; ; see: http://cestlaz.github.io/posts/using-emacs-26-gcal
;; ; credits: Mike Zamansky
;; (mapcar 'org-babel-load-file
;;   (directory-files "~/Documents/orgfiles/config" t ".+\.org$"))
#+END_SRC
** Epilogue
#+BEGIN_SRC emacs-lisp
(message "Initialization complete.")
#+END_SRC
